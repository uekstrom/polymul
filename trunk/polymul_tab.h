// This file was automatically generated by gentab.py

template<class numtype>
struct taylor_multiplier<numtype, 1, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 1, 1, 1, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 1, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[1]*p2[1] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[1]*p2[1] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] += p1[0]*m2[0] ;
    dst[2] += p1[1]*m2[0] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] = p1[0]*m2[0] ;
    dst[2] = p1[1]*m2[0] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] ;
    p1[1] += dst[1]*p2[0] + dst[2]*p2[1] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[1]*m2[0] ;
    p1[1] += dst[2]*m2[0] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 1, 2, 2>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 1, 2, 2, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 1, 2, 2>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] += p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[4] += p1[2]*p2[2] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] = p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[4] = p1[2]*p2[2] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[2] += p1[0]*m2[0] ;
    dst[3] += p1[1]*m2[0] ;
    dst[4] += p1[2]*m2[0] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[2] = p1[0]*m2[0] ;
    dst[3] = p1[1]*m2[0] ;
    dst[4] = p1[2]*m2[0] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] ;
    p1[1] += dst[1]*p2[0] + dst[2]*p2[1] + dst[3]*p2[2] ;
    p1[2] += dst[2]*p2[0] + dst[3]*p2[1] + dst[4]*p2[2] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[2]*m2[0] ;
    p1[1] += dst[3]*m2[0] ;
    p1[2] += dst[4]*m2[0] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 1, 3, 3>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 1, 3, 3, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 1, 3, 3>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] ;
    dst[5] += p1[2]*p2[3] + p1[3]*p2[2] ;
    dst[6] += p1[3]*p2[3] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] ;
    dst[5] = p1[2]*p2[3] + p1[3]*p2[2] ;
    dst[6] = p1[3]*p2[3] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[3] += p1[0]*m2[0] ;
    dst[4] += p1[1]*m2[0] ;
    dst[5] += p1[2]*m2[0] ;
    dst[6] += p1[3]*m2[0] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[3] = p1[0]*m2[0] ;
    dst[4] = p1[1]*m2[0] ;
    dst[5] = p1[2]*m2[0] ;
    dst[6] = p1[3]*m2[0] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] ;
    p1[1] += dst[1]*p2[0] + dst[2]*p2[1] + dst[3]*p2[2] + dst[4]*p2[3] ;
    p1[2] += dst[2]*p2[0] + dst[3]*p2[1] + dst[4]*p2[2] + dst[5]*p2[3] ;
    p1[3] += dst[3]*p2[0] + dst[4]*p2[1] + dst[5]*p2[2] + dst[6]*p2[3] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[3]*m2[0] ;
    p1[1] += dst[4]*m2[0] ;
    p1[2] += dst[5]*m2[0] ;
    p1[3] += dst[6]*m2[0] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 1, 4, 4>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 1, 4, 4, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[4] = p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 1, 4, 4>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] ;
    dst[6] += p1[2]*p2[4] + p1[3]*p2[3] + p1[4]*p2[2] ;
    dst[7] += p1[3]*p2[4] + p1[4]*p2[3] ;
    dst[8] += p1[4]*p2[4] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] ;
    dst[6] = p1[2]*p2[4] + p1[3]*p2[3] + p1[4]*p2[2] ;
    dst[7] = p1[3]*p2[4] + p1[4]*p2[3] ;
    dst[8] = p1[4]*p2[4] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[4] += p1[0]*m2[0] ;
    dst[5] += p1[1]*m2[0] ;
    dst[6] += p1[2]*m2[0] ;
    dst[7] += p1[3]*m2[0] ;
    dst[8] += p1[4]*m2[0] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[4] = p1[0]*m2[0] ;
    dst[5] = p1[1]*m2[0] ;
    dst[6] = p1[2]*m2[0] ;
    dst[7] = p1[3]*m2[0] ;
    dst[8] = p1[4]*m2[0] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] + dst[4]*p2[4] ;
    p1[1] += dst[1]*p2[0] + dst[2]*p2[1] + dst[3]*p2[2] + dst[4]*p2[3] + dst[5]*p2[4] ;
    p1[2] += dst[2]*p2[0] + dst[3]*p2[1] + dst[4]*p2[2] + dst[5]*p2[3] + dst[6]*p2[4] ;
    p1[3] += dst[3]*p2[0] + dst[4]*p2[1] + dst[5]*p2[2] + dst[6]*p2[3] + dst[7]*p2[4] ;
    p1[4] += dst[4]*p2[0] + dst[5]*p2[1] + dst[6]*p2[2] + dst[7]*p2[3] + dst[8]*p2[4] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[4]*m2[0] ;
    p1[1] += dst[5]*m2[0] ;
    p1[2] += dst[6]*m2[0] ;
    p1[3] += dst[7]*m2[0] ;
    p1[4] += dst[8]*m2[0] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 1, 5, 5>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[5]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[5]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 1, 5, 5, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[5] = p1[0]*p2[5] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 1, 5, 5>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[5]*p2[0] ;
    dst[6] += p1[1]*p2[5] + p1[2]*p2[4] + p1[3]*p2[3] + p1[4]*p2[2] + p1[5]*p2[1] ;
    dst[7] += p1[2]*p2[5] + p1[3]*p2[4] + p1[4]*p2[3] + p1[5]*p2[2] ;
    dst[8] += p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] ;
    dst[9] += p1[4]*p2[5] + p1[5]*p2[4] ;
    dst[10] += p1[5]*p2[5] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[1]*p2[1] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[2] + p1[2]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[3] + p1[2]*p2[2] + p1[3]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[5]*p2[0] ;
    dst[6] = p1[1]*p2[5] + p1[2]*p2[4] + p1[3]*p2[3] + p1[4]*p2[2] + p1[5]*p2[1] ;
    dst[7] = p1[2]*p2[5] + p1[3]*p2[4] + p1[4]*p2[3] + p1[5]*p2[2] ;
    dst[8] = p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] ;
    dst[9] = p1[4]*p2[5] + p1[5]*p2[4] ;
    dst[10] = p1[5]*p2[5] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[5] += p1[0]*m2[0] ;
    dst[6] += p1[1]*m2[0] ;
    dst[7] += p1[2]*m2[0] ;
    dst[8] += p1[3]*m2[0] ;
    dst[9] += p1[4]*m2[0] ;
    dst[10] += p1[5]*m2[0] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[5] = p1[0]*m2[0] ;
    dst[6] = p1[1]*m2[0] ;
    dst[7] = p1[2]*m2[0] ;
    dst[8] = p1[3]*m2[0] ;
    dst[9] = p1[4]*m2[0] ;
    dst[10] = p1[5]*m2[0] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] + dst[4]*p2[4] + dst[5]*p2[5] ;
    p1[1] += dst[1]*p2[0] + dst[2]*p2[1] + dst[3]*p2[2] + dst[4]*p2[3] + dst[5]*p2[4] + dst[6]*p2[5] ;
    p1[2] += dst[2]*p2[0] + dst[3]*p2[1] + dst[4]*p2[2] + dst[5]*p2[3] + dst[6]*p2[4] + dst[7]*p2[5] ;
    p1[3] += dst[3]*p2[0] + dst[4]*p2[1] + dst[5]*p2[2] + dst[6]*p2[3] + dst[7]*p2[4] + dst[8]*p2[5] ;
    p1[4] += dst[4]*p2[0] + dst[5]*p2[1] + dst[6]*p2[2] + dst[7]*p2[3] + dst[8]*p2[4] + dst[9]*p2[5] ;
    p1[5] += dst[5]*p2[0] + dst[6]*p2[1] + dst[7]*p2[2] + dst[8]*p2[3] + dst[9]*p2[4] + dst[10]*p2[5] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[5]*m2[0] ;
    p1[1] += dst[6]*m2[0] ;
    p1[2] += dst[7]*m2[0] ;
    p1[3] += dst[8]*m2[0] ;
    p1[4] += dst[9]*m2[0] ;
    p1[5] += dst[10]*m2[0] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 2, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 2, 1, 1, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 2, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[1]*p2[1] ;
    dst[4] += p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[5] += p1[2]*p2[2] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[1]*p2[1] ;
    dst[4] = p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[5] = p1[2]*p2[2] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] += p1[0]*m2[0] ;
    dst[2] += p1[0]*m2[1] ;
    dst[3] += p1[1]*m2[0] ;
    dst[4] += p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[5] += p1[2]*m2[1] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] = p1[0]*m2[0] ;
    dst[2] = p1[0]*m2[1] ;
    dst[3] = p1[1]*m2[0] ;
    dst[4] = p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[5] = p1[2]*m2[1] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] ;
    p1[1] += dst[1]*p2[0] + dst[3]*p2[1] + dst[4]*p2[2] ;
    p1[2] += dst[2]*p2[0] + dst[4]*p2[1] + dst[5]*p2[2] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[1]*m2[0] + dst[2]*m2[1] ;
    p1[1] += dst[3]*m2[0] + dst[4]*m2[1] ;
    p1[2] += dst[4]*m2[0] + dst[5]*m2[1] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 2, 2, 2>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 2, 2, 2, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[5] = p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 2, 2, 2>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    dst[6] += p1[1]*p2[3] + p1[3]*p2[1] ;
    dst[7] += p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] ;
    dst[8] += p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] ;
    dst[9] += p1[2]*p2[5] + p1[5]*p2[2] ;
    dst[10] += p1[3]*p2[3] ;
    dst[11] += p1[3]*p2[4] + p1[4]*p2[3] ;
    dst[12] += p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] ;
    dst[13] += p1[4]*p2[5] + p1[5]*p2[4] ;
    dst[14] += p1[5]*p2[5] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    dst[6] = p1[1]*p2[3] + p1[3]*p2[1] ;
    dst[7] = p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] ;
    dst[8] = p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] ;
    dst[9] = p1[2]*p2[5] + p1[5]*p2[2] ;
    dst[10] = p1[3]*p2[3] ;
    dst[11] = p1[3]*p2[4] + p1[4]*p2[3] ;
    dst[12] = p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] ;
    dst[13] = p1[4]*p2[5] + p1[5]*p2[4] ;
    dst[14] = p1[5]*p2[5] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[3] += p1[0]*m2[0] ;
    dst[4] += p1[0]*m2[1] ;
    dst[5] += p1[0]*m2[2] ;
    dst[6] += p1[1]*m2[0] ;
    dst[7] += p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[8] += p1[1]*m2[2] + p1[2]*m2[1] ;
    dst[9] += p1[2]*m2[2] ;
    dst[10] += p1[3]*m2[0] ;
    dst[11] += p1[3]*m2[1] + p1[4]*m2[0] ;
    dst[12] += p1[3]*m2[2] + p1[4]*m2[1] + p1[5]*m2[0] ;
    dst[13] += p1[4]*m2[2] + p1[5]*m2[1] ;
    dst[14] += p1[5]*m2[2] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[3] = p1[0]*m2[0] ;
    dst[4] = p1[0]*m2[1] ;
    dst[5] = p1[0]*m2[2] ;
    dst[6] = p1[1]*m2[0] ;
    dst[7] = p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[8] = p1[1]*m2[2] + p1[2]*m2[1] ;
    dst[9] = p1[2]*m2[2] ;
    dst[10] = p1[3]*m2[0] ;
    dst[11] = p1[3]*m2[1] + p1[4]*m2[0] ;
    dst[12] = p1[3]*m2[2] + p1[4]*m2[1] + p1[5]*m2[0] ;
    dst[13] = p1[4]*m2[2] + p1[5]*m2[1] ;
    dst[14] = p1[5]*m2[2] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] + dst[4]*p2[4] + dst[5]*p2[5] ;
    p1[1] += dst[1]*p2[0] + dst[3]*p2[1] + dst[4]*p2[2] + dst[6]*p2[3] + dst[7]*p2[4] + dst[8]*p2[5] ;
    p1[2] += dst[2]*p2[0] + dst[4]*p2[1] + dst[5]*p2[2] + dst[7]*p2[3] + dst[8]*p2[4] + dst[9]*p2[5] ;
    p1[3] += dst[3]*p2[0] + dst[6]*p2[1] + dst[7]*p2[2] + dst[10]*p2[3] + dst[11]*p2[4] + dst[12]*p2[5] ;
    p1[4] += dst[4]*p2[0] + dst[7]*p2[1] + dst[8]*p2[2] + dst[11]*p2[3] + dst[12]*p2[4] + dst[13]*p2[5] ;
    p1[5] += dst[5]*p2[0] + dst[8]*p2[1] + dst[9]*p2[2] + dst[12]*p2[3] + dst[13]*p2[4] + dst[14]*p2[5] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[3]*m2[0] + dst[4]*m2[1] + dst[5]*m2[2] ;
    p1[1] += dst[6]*m2[0] + dst[7]*m2[1] + dst[8]*m2[2] ;
    p1[2] += dst[7]*m2[0] + dst[8]*m2[1] + dst[9]*m2[2] ;
    p1[3] += dst[10]*m2[0] + dst[11]*m2[1] + dst[12]*m2[2] ;
    p1[4] += dst[11]*m2[0] + dst[12]*m2[1] + dst[13]*m2[2] ;
    p1[5] += dst[12]*m2[0] + dst[13]*m2[1] + dst[14]*m2[2] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 2, 3, 3>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    dst[6] += p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] += p1[0]*p2[7] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[7]*p2[0] ;
    dst[8] += p1[0]*p2[8] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[8]*p2[0] ;
    dst[9] += p1[0]*p2[9] + p1[2]*p2[5] + p1[5]*p2[2] + p1[9]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    dst[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] = p1[0]*p2[7] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[7]*p2[0] ;
    dst[8] = p1[0]*p2[8] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[8]*p2[0] ;
    dst[9] = p1[0]*p2[9] + p1[2]*p2[5] + p1[5]*p2[2] + p1[9]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 2, 3, 3, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[9] = p1[0]*p2[9] + p1[2]*p2[5] + p1[5]*p2[2] + p1[9]*p2[0] ;
    p1[8] = p1[0]*p2[8] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[8]*p2[0] ;
    p1[7] = p1[0]*p2[7] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[7]*p2[0] ;
    p1[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    p1[5] = p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 2, 3, 3>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    dst[6] += p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] += p1[0]*p2[7] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[7]*p2[0] ;
    dst[8] += p1[0]*p2[8] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[8]*p2[0] ;
    dst[9] += p1[0]*p2[9] + p1[2]*p2[5] + p1[5]*p2[2] + p1[9]*p2[0] ;
    dst[10] += p1[1]*p2[6] + p1[3]*p2[3] + p1[6]*p2[1] ;
    dst[11] += p1[1]*p2[7] + p1[2]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[2] + p1[7]*p2[1] ;
    dst[12] += p1[1]*p2[8] + p1[2]*p2[7] + p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] + p1[7]*p2[2] + p1[8]*p2[1] ;
    dst[13] += p1[1]*p2[9] + p1[2]*p2[8] + p1[4]*p2[5] + p1[5]*p2[4] + p1[8]*p2[2] + p1[9]*p2[1] ;
    dst[14] += p1[2]*p2[9] + p1[5]*p2[5] + p1[9]*p2[2] ;
    dst[15] += p1[3]*p2[6] + p1[6]*p2[3] ;
    dst[16] += p1[3]*p2[7] + p1[4]*p2[6] + p1[6]*p2[4] + p1[7]*p2[3] ;
    dst[17] += p1[3]*p2[8] + p1[4]*p2[7] + p1[5]*p2[6] + p1[6]*p2[5] + p1[7]*p2[4] + p1[8]*p2[3] ;
    dst[18] += p1[3]*p2[9] + p1[4]*p2[8] + p1[5]*p2[7] + p1[7]*p2[5] + p1[8]*p2[4] + p1[9]*p2[3] ;
    dst[19] += p1[4]*p2[9] + p1[5]*p2[8] + p1[8]*p2[5] + p1[9]*p2[4] ;
    dst[20] += p1[5]*p2[9] + p1[9]*p2[5] ;
    dst[21] += p1[6]*p2[6] ;
    dst[22] += p1[6]*p2[7] + p1[7]*p2[6] ;
    dst[23] += p1[6]*p2[8] + p1[7]*p2[7] + p1[8]*p2[6] ;
    dst[24] += p1[6]*p2[9] + p1[7]*p2[8] + p1[8]*p2[7] + p1[9]*p2[6] ;
    dst[25] += p1[7]*p2[9] + p1[8]*p2[8] + p1[9]*p2[7] ;
    dst[26] += p1[8]*p2[9] + p1[9]*p2[8] ;
    dst[27] += p1[9]*p2[9] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    dst[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] = p1[0]*p2[7] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[7]*p2[0] ;
    dst[8] = p1[0]*p2[8] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[8]*p2[0] ;
    dst[9] = p1[0]*p2[9] + p1[2]*p2[5] + p1[5]*p2[2] + p1[9]*p2[0] ;
    dst[10] = p1[1]*p2[6] + p1[3]*p2[3] + p1[6]*p2[1] ;
    dst[11] = p1[1]*p2[7] + p1[2]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[2] + p1[7]*p2[1] ;
    dst[12] = p1[1]*p2[8] + p1[2]*p2[7] + p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] + p1[7]*p2[2] + p1[8]*p2[1] ;
    dst[13] = p1[1]*p2[9] + p1[2]*p2[8] + p1[4]*p2[5] + p1[5]*p2[4] + p1[8]*p2[2] + p1[9]*p2[1] ;
    dst[14] = p1[2]*p2[9] + p1[5]*p2[5] + p1[9]*p2[2] ;
    dst[15] = p1[3]*p2[6] + p1[6]*p2[3] ;
    dst[16] = p1[3]*p2[7] + p1[4]*p2[6] + p1[6]*p2[4] + p1[7]*p2[3] ;
    dst[17] = p1[3]*p2[8] + p1[4]*p2[7] + p1[5]*p2[6] + p1[6]*p2[5] + p1[7]*p2[4] + p1[8]*p2[3] ;
    dst[18] = p1[3]*p2[9] + p1[4]*p2[8] + p1[5]*p2[7] + p1[7]*p2[5] + p1[8]*p2[4] + p1[9]*p2[3] ;
    dst[19] = p1[4]*p2[9] + p1[5]*p2[8] + p1[8]*p2[5] + p1[9]*p2[4] ;
    dst[20] = p1[5]*p2[9] + p1[9]*p2[5] ;
    dst[21] = p1[6]*p2[6] ;
    dst[22] = p1[6]*p2[7] + p1[7]*p2[6] ;
    dst[23] = p1[6]*p2[8] + p1[7]*p2[7] + p1[8]*p2[6] ;
    dst[24] = p1[6]*p2[9] + p1[7]*p2[8] + p1[8]*p2[7] + p1[9]*p2[6] ;
    dst[25] = p1[7]*p2[9] + p1[8]*p2[8] + p1[9]*p2[7] ;
    dst[26] = p1[8]*p2[9] + p1[9]*p2[8] ;
    dst[27] = p1[9]*p2[9] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[6] += p1[0]*m2[0] ;
    dst[7] += p1[0]*m2[1] ;
    dst[8] += p1[0]*m2[2] ;
    dst[9] += p1[0]*m2[3] ;
    dst[10] += p1[1]*m2[0] ;
    dst[11] += p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[12] += p1[1]*m2[2] + p1[2]*m2[1] ;
    dst[13] += p1[1]*m2[3] + p1[2]*m2[2] ;
    dst[14] += p1[2]*m2[3] ;
    dst[15] += p1[3]*m2[0] ;
    dst[16] += p1[3]*m2[1] + p1[4]*m2[0] ;
    dst[17] += p1[3]*m2[2] + p1[4]*m2[1] + p1[5]*m2[0] ;
    dst[18] += p1[3]*m2[3] + p1[4]*m2[2] + p1[5]*m2[1] ;
    dst[19] += p1[4]*m2[3] + p1[5]*m2[2] ;
    dst[20] += p1[5]*m2[3] ;
    dst[21] += p1[6]*m2[0] ;
    dst[22] += p1[6]*m2[1] + p1[7]*m2[0] ;
    dst[23] += p1[6]*m2[2] + p1[7]*m2[1] + p1[8]*m2[0] ;
    dst[24] += p1[6]*m2[3] + p1[7]*m2[2] + p1[8]*m2[1] + p1[9]*m2[0] ;
    dst[25] += p1[7]*m2[3] + p1[8]*m2[2] + p1[9]*m2[1] ;
    dst[26] += p1[8]*m2[3] + p1[9]*m2[2] ;
    dst[27] += p1[9]*m2[3] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[6] = p1[0]*m2[0] ;
    dst[7] = p1[0]*m2[1] ;
    dst[8] = p1[0]*m2[2] ;
    dst[9] = p1[0]*m2[3] ;
    dst[10] = p1[1]*m2[0] ;
    dst[11] = p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[12] = p1[1]*m2[2] + p1[2]*m2[1] ;
    dst[13] = p1[1]*m2[3] + p1[2]*m2[2] ;
    dst[14] = p1[2]*m2[3] ;
    dst[15] = p1[3]*m2[0] ;
    dst[16] = p1[3]*m2[1] + p1[4]*m2[0] ;
    dst[17] = p1[3]*m2[2] + p1[4]*m2[1] + p1[5]*m2[0] ;
    dst[18] = p1[3]*m2[3] + p1[4]*m2[2] + p1[5]*m2[1] ;
    dst[19] = p1[4]*m2[3] + p1[5]*m2[2] ;
    dst[20] = p1[5]*m2[3] ;
    dst[21] = p1[6]*m2[0] ;
    dst[22] = p1[6]*m2[1] + p1[7]*m2[0] ;
    dst[23] = p1[6]*m2[2] + p1[7]*m2[1] + p1[8]*m2[0] ;
    dst[24] = p1[6]*m2[3] + p1[7]*m2[2] + p1[8]*m2[1] + p1[9]*m2[0] ;
    dst[25] = p1[7]*m2[3] + p1[8]*m2[2] + p1[9]*m2[1] ;
    dst[26] = p1[8]*m2[3] + p1[9]*m2[2] ;
    dst[27] = p1[9]*m2[3] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] + dst[4]*p2[4] + dst[5]*p2[5] + dst[6]*p2[6] + dst[7]*p2[7] + dst[8]*p2[8] + dst[9]*p2[9] ;
    p1[1] += dst[1]*p2[0] + dst[3]*p2[1] + dst[4]*p2[2] + dst[6]*p2[3] + dst[7]*p2[4] + dst[8]*p2[5] + dst[10]*p2[6] + dst[11]*p2[7] + dst[12]*p2[8] + dst[13]*p2[9] ;
    p1[2] += dst[2]*p2[0] + dst[4]*p2[1] + dst[5]*p2[2] + dst[7]*p2[3] + dst[8]*p2[4] + dst[9]*p2[5] + dst[11]*p2[6] + dst[12]*p2[7] + dst[13]*p2[8] + dst[14]*p2[9] ;
    p1[3] += dst[3]*p2[0] + dst[6]*p2[1] + dst[7]*p2[2] + dst[10]*p2[3] + dst[11]*p2[4] + dst[12]*p2[5] + dst[15]*p2[6] + dst[16]*p2[7] + dst[17]*p2[8] + dst[18]*p2[9] ;
    p1[4] += dst[4]*p2[0] + dst[7]*p2[1] + dst[8]*p2[2] + dst[11]*p2[3] + dst[12]*p2[4] + dst[13]*p2[5] + dst[16]*p2[6] + dst[17]*p2[7] + dst[18]*p2[8] + dst[19]*p2[9] ;
    p1[5] += dst[5]*p2[0] + dst[8]*p2[1] + dst[9]*p2[2] + dst[12]*p2[3] + dst[13]*p2[4] + dst[14]*p2[5] + dst[17]*p2[6] + dst[18]*p2[7] + dst[19]*p2[8] + dst[20]*p2[9] ;
    p1[6] += dst[6]*p2[0] + dst[10]*p2[1] + dst[11]*p2[2] + dst[15]*p2[3] + dst[16]*p2[4] + dst[17]*p2[5] + dst[21]*p2[6] + dst[22]*p2[7] + dst[23]*p2[8] + dst[24]*p2[9] ;
    p1[7] += dst[7]*p2[0] + dst[11]*p2[1] + dst[12]*p2[2] + dst[16]*p2[3] + dst[17]*p2[4] + dst[18]*p2[5] + dst[22]*p2[6] + dst[23]*p2[7] + dst[24]*p2[8] + dst[25]*p2[9] ;
    p1[8] += dst[8]*p2[0] + dst[12]*p2[1] + dst[13]*p2[2] + dst[17]*p2[3] + dst[18]*p2[4] + dst[19]*p2[5] + dst[23]*p2[6] + dst[24]*p2[7] + dst[25]*p2[8] + dst[26]*p2[9] ;
    p1[9] += dst[9]*p2[0] + dst[13]*p2[1] + dst[14]*p2[2] + dst[18]*p2[3] + dst[19]*p2[4] + dst[20]*p2[5] + dst[24]*p2[6] + dst[25]*p2[7] + dst[26]*p2[8] + dst[27]*p2[9] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[6]*m2[0] + dst[7]*m2[1] + dst[8]*m2[2] + dst[9]*m2[3] ;
    p1[1] += dst[10]*m2[0] + dst[11]*m2[1] + dst[12]*m2[2] + dst[13]*m2[3] ;
    p1[2] += dst[11]*m2[0] + dst[12]*m2[1] + dst[13]*m2[2] + dst[14]*m2[3] ;
    p1[3] += dst[15]*m2[0] + dst[16]*m2[1] + dst[17]*m2[2] + dst[18]*m2[3] ;
    p1[4] += dst[16]*m2[0] + dst[17]*m2[1] + dst[18]*m2[2] + dst[19]*m2[3] ;
    p1[5] += dst[17]*m2[0] + dst[18]*m2[1] + dst[19]*m2[2] + dst[20]*m2[3] ;
    p1[6] += dst[21]*m2[0] + dst[22]*m2[1] + dst[23]*m2[2] + dst[24]*m2[3] ;
    p1[7] += dst[22]*m2[0] + dst[23]*m2[1] + dst[24]*m2[2] + dst[25]*m2[3] ;
    p1[8] += dst[23]*m2[0] + dst[24]*m2[1] + dst[25]*m2[2] + dst[26]*m2[3] ;
    p1[9] += dst[24]*m2[0] + dst[25]*m2[1] + dst[26]*m2[2] + dst[27]*m2[3] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 2, 4, 4>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    dst[6] += p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] += p1[0]*p2[7] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[7]*p2[0] ;
    dst[8] += p1[0]*p2[8] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[8]*p2[0] ;
    dst[9] += p1[0]*p2[9] + p1[2]*p2[5] + p1[5]*p2[2] + p1[9]*p2[0] ;
    dst[10] += p1[0]*p2[10] + p1[1]*p2[6] + p1[3]*p2[3] + p1[6]*p2[1] + p1[10]*p2[0] ;
    dst[11] += p1[0]*p2[11] + p1[1]*p2[7] + p1[2]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[2] + p1[7]*p2[1] + p1[11]*p2[0] ;
    dst[12] += p1[0]*p2[12] + p1[1]*p2[8] + p1[2]*p2[7] + p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] + p1[7]*p2[2] + p1[8]*p2[1] + p1[12]*p2[0] ;
    dst[13] += p1[0]*p2[13] + p1[1]*p2[9] + p1[2]*p2[8] + p1[4]*p2[5] + p1[5]*p2[4] + p1[8]*p2[2] + p1[9]*p2[1] + p1[13]*p2[0] ;
    dst[14] += p1[0]*p2[14] + p1[2]*p2[9] + p1[5]*p2[5] + p1[9]*p2[2] + p1[14]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    dst[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] = p1[0]*p2[7] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[7]*p2[0] ;
    dst[8] = p1[0]*p2[8] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[8]*p2[0] ;
    dst[9] = p1[0]*p2[9] + p1[2]*p2[5] + p1[5]*p2[2] + p1[9]*p2[0] ;
    dst[10] = p1[0]*p2[10] + p1[1]*p2[6] + p1[3]*p2[3] + p1[6]*p2[1] + p1[10]*p2[0] ;
    dst[11] = p1[0]*p2[11] + p1[1]*p2[7] + p1[2]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[2] + p1[7]*p2[1] + p1[11]*p2[0] ;
    dst[12] = p1[0]*p2[12] + p1[1]*p2[8] + p1[2]*p2[7] + p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] + p1[7]*p2[2] + p1[8]*p2[1] + p1[12]*p2[0] ;
    dst[13] = p1[0]*p2[13] + p1[1]*p2[9] + p1[2]*p2[8] + p1[4]*p2[5] + p1[5]*p2[4] + p1[8]*p2[2] + p1[9]*p2[1] + p1[13]*p2[0] ;
    dst[14] = p1[0]*p2[14] + p1[2]*p2[9] + p1[5]*p2[5] + p1[9]*p2[2] + p1[14]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 2, 4, 4, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[14] = p1[0]*p2[14] + p1[2]*p2[9] + p1[5]*p2[5] + p1[9]*p2[2] + p1[14]*p2[0] ;
    p1[13] = p1[0]*p2[13] + p1[1]*p2[9] + p1[2]*p2[8] + p1[4]*p2[5] + p1[5]*p2[4] + p1[8]*p2[2] + p1[9]*p2[1] + p1[13]*p2[0] ;
    p1[12] = p1[0]*p2[12] + p1[1]*p2[8] + p1[2]*p2[7] + p1[3]*p2[5] + p1[4]*p2[4] + p1[5]*p2[3] + p1[7]*p2[2] + p1[8]*p2[1] + p1[12]*p2[0] ;
    p1[11] = p1[0]*p2[11] + p1[1]*p2[7] + p1[2]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[2] + p1[7]*p2[1] + p1[11]*p2[0] ;
    p1[10] = p1[0]*p2[10] + p1[1]*p2[6] + p1[3]*p2[3] + p1[6]*p2[1] + p1[10]*p2[0] ;
    p1[9] = p1[0]*p2[9] + p1[2]*p2[5] + p1[5]*p2[2] + p1[9]*p2[0] ;
    p1[8] = p1[0]*p2[8] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[8]*p2[0] ;
    p1[7] = p1[0]*p2[7] + p1[1]*p2[4] + p1[2]*p2[3] + p1[3]*p2[2] + p1[4]*p2[1] + p1[7]*p2[0] ;
    p1[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    p1[5] = p1[0]*p2[5] + p1[2]*p2[2] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[1]*p2[2] + p1[2]*p2[1] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[1]*p2[1] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};





template<class numtype>
struct taylor_multiplier<numtype, 3, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 3, 1, 1, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 3, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[1]*p2[1] ;
    dst[5] += p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[6] += p1[1]*p2[3] + p1[3]*p2[1] ;
    dst[7] += p1[2]*p2[2] ;
    dst[8] += p1[2]*p2[3] + p1[3]*p2[2] ;
    dst[9] += p1[3]*p2[3] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[1]*p2[1] ;
    dst[5] = p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[6] = p1[1]*p2[3] + p1[3]*p2[1] ;
    dst[7] = p1[2]*p2[2] ;
    dst[8] = p1[2]*p2[3] + p1[3]*p2[2] ;
    dst[9] = p1[3]*p2[3] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] += p1[0]*m2[0] ;
    dst[2] += p1[0]*m2[1] ;
    dst[3] += p1[0]*m2[2] ;
    dst[4] += p1[1]*m2[0] ;
    dst[5] += p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[6] += p1[1]*m2[2] + p1[3]*m2[0] ;
    dst[7] += p1[2]*m2[1] ;
    dst[8] += p1[2]*m2[2] + p1[3]*m2[1] ;
    dst[9] += p1[3]*m2[2] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] = p1[0]*m2[0] ;
    dst[2] = p1[0]*m2[1] ;
    dst[3] = p1[0]*m2[2] ;
    dst[4] = p1[1]*m2[0] ;
    dst[5] = p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[6] = p1[1]*m2[2] + p1[3]*m2[0] ;
    dst[7] = p1[2]*m2[1] ;
    dst[8] = p1[2]*m2[2] + p1[3]*m2[1] ;
    dst[9] = p1[3]*m2[2] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] ;
    p1[1] += dst[1]*p2[0] + dst[4]*p2[1] + dst[5]*p2[2] + dst[6]*p2[3] ;
    p1[2] += dst[2]*p2[0] + dst[5]*p2[1] + dst[7]*p2[2] + dst[8]*p2[3] ;
    p1[3] += dst[3]*p2[0] + dst[6]*p2[1] + dst[8]*p2[2] + dst[9]*p2[3] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[1]*m2[0] + dst[2]*m2[1] + dst[3]*m2[2] ;
    p1[1] += dst[4]*m2[0] + dst[5]*m2[1] + dst[6]*m2[2] ;
    p1[2] += dst[5]*m2[0] + dst[7]*m2[1] + dst[8]*m2[2] ;
    p1[3] += dst[6]*m2[0] + dst[8]*m2[1] + dst[9]*m2[2] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 3, 2, 2>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[1]*p2[2] + p1[2]*p2[1] + p1[5]*p2[0] ;
    dst[6] += p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] += p1[0]*p2[7] + p1[2]*p2[2] + p1[7]*p2[0] ;
    dst[8] += p1[0]*p2[8] + p1[2]*p2[3] + p1[3]*p2[2] + p1[8]*p2[0] ;
    dst[9] += p1[0]*p2[9] + p1[3]*p2[3] + p1[9]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[1]*p2[2] + p1[2]*p2[1] + p1[5]*p2[0] ;
    dst[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] = p1[0]*p2[7] + p1[2]*p2[2] + p1[7]*p2[0] ;
    dst[8] = p1[0]*p2[8] + p1[2]*p2[3] + p1[3]*p2[2] + p1[8]*p2[0] ;
    dst[9] = p1[0]*p2[9] + p1[3]*p2[3] + p1[9]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 3, 2, 2, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[9] = p1[0]*p2[9] + p1[3]*p2[3] + p1[9]*p2[0] ;
    p1[8] = p1[0]*p2[8] + p1[2]*p2[3] + p1[3]*p2[2] + p1[8]*p2[0] ;
    p1[7] = p1[0]*p2[7] + p1[2]*p2[2] + p1[7]*p2[0] ;
    p1[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    p1[5] = p1[0]*p2[5] + p1[1]*p2[2] + p1[2]*p2[1] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[1]*p2[1] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 3, 2, 2>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[1]*p2[2] + p1[2]*p2[1] + p1[5]*p2[0] ;
    dst[6] += p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] += p1[0]*p2[7] + p1[2]*p2[2] + p1[7]*p2[0] ;
    dst[8] += p1[0]*p2[8] + p1[2]*p2[3] + p1[3]*p2[2] + p1[8]*p2[0] ;
    dst[9] += p1[0]*p2[9] + p1[3]*p2[3] + p1[9]*p2[0] ;
    dst[10] += p1[1]*p2[4] + p1[4]*p2[1] ;
    dst[11] += p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] ;
    dst[12] += p1[1]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[1] ;
    dst[13] += p1[1]*p2[7] + p1[2]*p2[5] + p1[5]*p2[2] + p1[7]*p2[1] ;
    dst[14] += p1[1]*p2[8] + p1[2]*p2[6] + p1[3]*p2[5] + p1[5]*p2[3] + p1[6]*p2[2] + p1[8]*p2[1] ;
    dst[15] += p1[1]*p2[9] + p1[3]*p2[6] + p1[6]*p2[3] + p1[9]*p2[1] ;
    dst[16] += p1[2]*p2[7] + p1[7]*p2[2] ;
    dst[17] += p1[2]*p2[8] + p1[3]*p2[7] + p1[7]*p2[3] + p1[8]*p2[2] ;
    dst[18] += p1[2]*p2[9] + p1[3]*p2[8] + p1[8]*p2[3] + p1[9]*p2[2] ;
    dst[19] += p1[3]*p2[9] + p1[9]*p2[3] ;
    dst[20] += p1[4]*p2[4] ;
    dst[21] += p1[4]*p2[5] + p1[5]*p2[4] ;
    dst[22] += p1[4]*p2[6] + p1[6]*p2[4] ;
    dst[23] += p1[4]*p2[7] + p1[5]*p2[5] + p1[7]*p2[4] ;
    dst[24] += p1[4]*p2[8] + p1[5]*p2[6] + p1[6]*p2[5] + p1[8]*p2[4] ;
    dst[25] += p1[4]*p2[9] + p1[6]*p2[6] + p1[9]*p2[4] ;
    dst[26] += p1[5]*p2[7] + p1[7]*p2[5] ;
    dst[27] += p1[5]*p2[8] + p1[6]*p2[7] + p1[7]*p2[6] + p1[8]*p2[5] ;
    dst[28] += p1[5]*p2[9] + p1[6]*p2[8] + p1[8]*p2[6] + p1[9]*p2[5] ;
    dst[29] += p1[6]*p2[9] + p1[9]*p2[6] ;
    dst[30] += p1[7]*p2[7] ;
    dst[31] += p1[7]*p2[8] + p1[8]*p2[7] ;
    dst[32] += p1[7]*p2[9] + p1[8]*p2[8] + p1[9]*p2[7] ;
    dst[33] += p1[8]*p2[9] + p1[9]*p2[8] ;
    dst[34] += p1[9]*p2[9] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[1]*p2[2] + p1[2]*p2[1] + p1[5]*p2[0] ;
    dst[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] = p1[0]*p2[7] + p1[2]*p2[2] + p1[7]*p2[0] ;
    dst[8] = p1[0]*p2[8] + p1[2]*p2[3] + p1[3]*p2[2] + p1[8]*p2[0] ;
    dst[9] = p1[0]*p2[9] + p1[3]*p2[3] + p1[9]*p2[0] ;
    dst[10] = p1[1]*p2[4] + p1[4]*p2[1] ;
    dst[11] = p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] ;
    dst[12] = p1[1]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[1] ;
    dst[13] = p1[1]*p2[7] + p1[2]*p2[5] + p1[5]*p2[2] + p1[7]*p2[1] ;
    dst[14] = p1[1]*p2[8] + p1[2]*p2[6] + p1[3]*p2[5] + p1[5]*p2[3] + p1[6]*p2[2] + p1[8]*p2[1] ;
    dst[15] = p1[1]*p2[9] + p1[3]*p2[6] + p1[6]*p2[3] + p1[9]*p2[1] ;
    dst[16] = p1[2]*p2[7] + p1[7]*p2[2] ;
    dst[17] = p1[2]*p2[8] + p1[3]*p2[7] + p1[7]*p2[3] + p1[8]*p2[2] ;
    dst[18] = p1[2]*p2[9] + p1[3]*p2[8] + p1[8]*p2[3] + p1[9]*p2[2] ;
    dst[19] = p1[3]*p2[9] + p1[9]*p2[3] ;
    dst[20] = p1[4]*p2[4] ;
    dst[21] = p1[4]*p2[5] + p1[5]*p2[4] ;
    dst[22] = p1[4]*p2[6] + p1[6]*p2[4] ;
    dst[23] = p1[4]*p2[7] + p1[5]*p2[5] + p1[7]*p2[4] ;
    dst[24] = p1[4]*p2[8] + p1[5]*p2[6] + p1[6]*p2[5] + p1[8]*p2[4] ;
    dst[25] = p1[4]*p2[9] + p1[6]*p2[6] + p1[9]*p2[4] ;
    dst[26] = p1[5]*p2[7] + p1[7]*p2[5] ;
    dst[27] = p1[5]*p2[8] + p1[6]*p2[7] + p1[7]*p2[6] + p1[8]*p2[5] ;
    dst[28] = p1[5]*p2[9] + p1[6]*p2[8] + p1[8]*p2[6] + p1[9]*p2[5] ;
    dst[29] = p1[6]*p2[9] + p1[9]*p2[6] ;
    dst[30] = p1[7]*p2[7] ;
    dst[31] = p1[7]*p2[8] + p1[8]*p2[7] ;
    dst[32] = p1[7]*p2[9] + p1[8]*p2[8] + p1[9]*p2[7] ;
    dst[33] = p1[8]*p2[9] + p1[9]*p2[8] ;
    dst[34] = p1[9]*p2[9] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[4] += p1[0]*m2[0] ;
    dst[5] += p1[0]*m2[1] ;
    dst[6] += p1[0]*m2[2] ;
    dst[7] += p1[0]*m2[3] ;
    dst[8] += p1[0]*m2[4] ;
    dst[9] += p1[0]*m2[5] ;
    dst[10] += p1[1]*m2[0] ;
    dst[11] += p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[12] += p1[1]*m2[2] + p1[3]*m2[0] ;
    dst[13] += p1[1]*m2[3] + p1[2]*m2[1] ;
    dst[14] += p1[1]*m2[4] + p1[2]*m2[2] + p1[3]*m2[1] ;
    dst[15] += p1[1]*m2[5] + p1[3]*m2[2] ;
    dst[16] += p1[2]*m2[3] ;
    dst[17] += p1[2]*m2[4] + p1[3]*m2[3] ;
    dst[18] += p1[2]*m2[5] + p1[3]*m2[4] ;
    dst[19] += p1[3]*m2[5] ;
    dst[20] += p1[4]*m2[0] ;
    dst[21] += p1[4]*m2[1] + p1[5]*m2[0] ;
    dst[22] += p1[4]*m2[2] + p1[6]*m2[0] ;
    dst[23] += p1[4]*m2[3] + p1[5]*m2[1] + p1[7]*m2[0] ;
    dst[24] += p1[4]*m2[4] + p1[5]*m2[2] + p1[6]*m2[1] + p1[8]*m2[0] ;
    dst[25] += p1[4]*m2[5] + p1[6]*m2[2] + p1[9]*m2[0] ;
    dst[26] += p1[5]*m2[3] + p1[7]*m2[1] ;
    dst[27] += p1[5]*m2[4] + p1[6]*m2[3] + p1[7]*m2[2] + p1[8]*m2[1] ;
    dst[28] += p1[5]*m2[5] + p1[6]*m2[4] + p1[8]*m2[2] + p1[9]*m2[1] ;
    dst[29] += p1[6]*m2[5] + p1[9]*m2[2] ;
    dst[30] += p1[7]*m2[3] ;
    dst[31] += p1[7]*m2[4] + p1[8]*m2[3] ;
    dst[32] += p1[7]*m2[5] + p1[8]*m2[4] + p1[9]*m2[3] ;
    dst[33] += p1[8]*m2[5] + p1[9]*m2[4] ;
    dst[34] += p1[9]*m2[5] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[4] = p1[0]*m2[0] ;
    dst[5] = p1[0]*m2[1] ;
    dst[6] = p1[0]*m2[2] ;
    dst[7] = p1[0]*m2[3] ;
    dst[8] = p1[0]*m2[4] ;
    dst[9] = p1[0]*m2[5] ;
    dst[10] = p1[1]*m2[0] ;
    dst[11] = p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[12] = p1[1]*m2[2] + p1[3]*m2[0] ;
    dst[13] = p1[1]*m2[3] + p1[2]*m2[1] ;
    dst[14] = p1[1]*m2[4] + p1[2]*m2[2] + p1[3]*m2[1] ;
    dst[15] = p1[1]*m2[5] + p1[3]*m2[2] ;
    dst[16] = p1[2]*m2[3] ;
    dst[17] = p1[2]*m2[4] + p1[3]*m2[3] ;
    dst[18] = p1[2]*m2[5] + p1[3]*m2[4] ;
    dst[19] = p1[3]*m2[5] ;
    dst[20] = p1[4]*m2[0] ;
    dst[21] = p1[4]*m2[1] + p1[5]*m2[0] ;
    dst[22] = p1[4]*m2[2] + p1[6]*m2[0] ;
    dst[23] = p1[4]*m2[3] + p1[5]*m2[1] + p1[7]*m2[0] ;
    dst[24] = p1[4]*m2[4] + p1[5]*m2[2] + p1[6]*m2[1] + p1[8]*m2[0] ;
    dst[25] = p1[4]*m2[5] + p1[6]*m2[2] + p1[9]*m2[0] ;
    dst[26] = p1[5]*m2[3] + p1[7]*m2[1] ;
    dst[27] = p1[5]*m2[4] + p1[6]*m2[3] + p1[7]*m2[2] + p1[8]*m2[1] ;
    dst[28] = p1[5]*m2[5] + p1[6]*m2[4] + p1[8]*m2[2] + p1[9]*m2[1] ;
    dst[29] = p1[6]*m2[5] + p1[9]*m2[2] ;
    dst[30] = p1[7]*m2[3] ;
    dst[31] = p1[7]*m2[4] + p1[8]*m2[3] ;
    dst[32] = p1[7]*m2[5] + p1[8]*m2[4] + p1[9]*m2[3] ;
    dst[33] = p1[8]*m2[5] + p1[9]*m2[4] ;
    dst[34] = p1[9]*m2[5] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] + dst[4]*p2[4] + dst[5]*p2[5] + dst[6]*p2[6] + dst[7]*p2[7] + dst[8]*p2[8] + dst[9]*p2[9] ;
    p1[1] += dst[1]*p2[0] + dst[4]*p2[1] + dst[5]*p2[2] + dst[6]*p2[3] + dst[10]*p2[4] + dst[11]*p2[5] + dst[12]*p2[6] + dst[13]*p2[7] + dst[14]*p2[8] + dst[15]*p2[9] ;
    p1[2] += dst[2]*p2[0] + dst[5]*p2[1] + dst[7]*p2[2] + dst[8]*p2[3] + dst[11]*p2[4] + dst[13]*p2[5] + dst[14]*p2[6] + dst[16]*p2[7] + dst[17]*p2[8] + dst[18]*p2[9] ;
    p1[3] += dst[3]*p2[0] + dst[6]*p2[1] + dst[8]*p2[2] + dst[9]*p2[3] + dst[12]*p2[4] + dst[14]*p2[5] + dst[15]*p2[6] + dst[17]*p2[7] + dst[18]*p2[8] + dst[19]*p2[9] ;
    p1[4] += dst[4]*p2[0] + dst[10]*p2[1] + dst[11]*p2[2] + dst[12]*p2[3] + dst[20]*p2[4] + dst[21]*p2[5] + dst[22]*p2[6] + dst[23]*p2[7] + dst[24]*p2[8] + dst[25]*p2[9] ;
    p1[5] += dst[5]*p2[0] + dst[11]*p2[1] + dst[13]*p2[2] + dst[14]*p2[3] + dst[21]*p2[4] + dst[23]*p2[5] + dst[24]*p2[6] + dst[26]*p2[7] + dst[27]*p2[8] + dst[28]*p2[9] ;
    p1[6] += dst[6]*p2[0] + dst[12]*p2[1] + dst[14]*p2[2] + dst[15]*p2[3] + dst[22]*p2[4] + dst[24]*p2[5] + dst[25]*p2[6] + dst[27]*p2[7] + dst[28]*p2[8] + dst[29]*p2[9] ;
    p1[7] += dst[7]*p2[0] + dst[13]*p2[1] + dst[16]*p2[2] + dst[17]*p2[3] + dst[23]*p2[4] + dst[26]*p2[5] + dst[27]*p2[6] + dst[30]*p2[7] + dst[31]*p2[8] + dst[32]*p2[9] ;
    p1[8] += dst[8]*p2[0] + dst[14]*p2[1] + dst[17]*p2[2] + dst[18]*p2[3] + dst[24]*p2[4] + dst[27]*p2[5] + dst[28]*p2[6] + dst[31]*p2[7] + dst[32]*p2[8] + dst[33]*p2[9] ;
    p1[9] += dst[9]*p2[0] + dst[15]*p2[1] + dst[18]*p2[2] + dst[19]*p2[3] + dst[25]*p2[4] + dst[28]*p2[5] + dst[29]*p2[6] + dst[32]*p2[7] + dst[33]*p2[8] + dst[34]*p2[9] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[4]*m2[0] + dst[5]*m2[1] + dst[6]*m2[2] + dst[7]*m2[3] + dst[8]*m2[4] + dst[9]*m2[5] ;
    p1[1] += dst[10]*m2[0] + dst[11]*m2[1] + dst[12]*m2[2] + dst[13]*m2[3] + dst[14]*m2[4] + dst[15]*m2[5] ;
    p1[2] += dst[11]*m2[0] + dst[13]*m2[1] + dst[14]*m2[2] + dst[16]*m2[3] + dst[17]*m2[4] + dst[18]*m2[5] ;
    p1[3] += dst[12]*m2[0] + dst[14]*m2[1] + dst[15]*m2[2] + dst[17]*m2[3] + dst[18]*m2[4] + dst[19]*m2[5] ;
    p1[4] += dst[20]*m2[0] + dst[21]*m2[1] + dst[22]*m2[2] + dst[23]*m2[3] + dst[24]*m2[4] + dst[25]*m2[5] ;
    p1[5] += dst[21]*m2[0] + dst[23]*m2[1] + dst[24]*m2[2] + dst[26]*m2[3] + dst[27]*m2[4] + dst[28]*m2[5] ;
    p1[6] += dst[22]*m2[0] + dst[24]*m2[1] + dst[25]*m2[2] + dst[27]*m2[3] + dst[28]*m2[4] + dst[29]*m2[5] ;
    p1[7] += dst[23]*m2[0] + dst[26]*m2[1] + dst[27]*m2[2] + dst[30]*m2[3] + dst[31]*m2[4] + dst[32]*m2[5] ;
    p1[8] += dst[24]*m2[0] + dst[27]*m2[1] + dst[28]*m2[2] + dst[31]*m2[3] + dst[32]*m2[4] + dst[33]*m2[5] ;
    p1[9] += dst[25]*m2[0] + dst[28]*m2[1] + dst[29]*m2[2] + dst[32]*m2[3] + dst[33]*m2[4] + dst[34]*m2[5] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 3, 3, 3>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[1]*p2[1] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[1]*p2[2] + p1[2]*p2[1] + p1[5]*p2[0] ;
    dst[6] += p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] += p1[0]*p2[7] + p1[2]*p2[2] + p1[7]*p2[0] ;
    dst[8] += p1[0]*p2[8] + p1[2]*p2[3] + p1[3]*p2[2] + p1[8]*p2[0] ;
    dst[9] += p1[0]*p2[9] + p1[3]*p2[3] + p1[9]*p2[0] ;
    dst[10] += p1[0]*p2[10] + p1[1]*p2[4] + p1[4]*p2[1] + p1[10]*p2[0] ;
    dst[11] += p1[0]*p2[11] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[11]*p2[0] ;
    dst[12] += p1[0]*p2[12] + p1[1]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[1] + p1[12]*p2[0] ;
    dst[13] += p1[0]*p2[13] + p1[1]*p2[7] + p1[2]*p2[5] + p1[5]*p2[2] + p1[7]*p2[1] + p1[13]*p2[0] ;
    dst[14] += p1[0]*p2[14] + p1[1]*p2[8] + p1[2]*p2[6] + p1[3]*p2[5] + p1[5]*p2[3] + p1[6]*p2[2] + p1[8]*p2[1] + p1[14]*p2[0] ;
    dst[15] += p1[0]*p2[15] + p1[1]*p2[9] + p1[3]*p2[6] + p1[6]*p2[3] + p1[9]*p2[1] + p1[15]*p2[0] ;
    dst[16] += p1[0]*p2[16] + p1[2]*p2[7] + p1[7]*p2[2] + p1[16]*p2[0] ;
    dst[17] += p1[0]*p2[17] + p1[2]*p2[8] + p1[3]*p2[7] + p1[7]*p2[3] + p1[8]*p2[2] + p1[17]*p2[0] ;
    dst[18] += p1[0]*p2[18] + p1[2]*p2[9] + p1[3]*p2[8] + p1[8]*p2[3] + p1[9]*p2[2] + p1[18]*p2[0] ;
    dst[19] += p1[0]*p2[19] + p1[3]*p2[9] + p1[9]*p2[3] + p1[19]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[1]*p2[1] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[1]*p2[2] + p1[2]*p2[1] + p1[5]*p2[0] ;
    dst[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    dst[7] = p1[0]*p2[7] + p1[2]*p2[2] + p1[7]*p2[0] ;
    dst[8] = p1[0]*p2[8] + p1[2]*p2[3] + p1[3]*p2[2] + p1[8]*p2[0] ;
    dst[9] = p1[0]*p2[9] + p1[3]*p2[3] + p1[9]*p2[0] ;
    dst[10] = p1[0]*p2[10] + p1[1]*p2[4] + p1[4]*p2[1] + p1[10]*p2[0] ;
    dst[11] = p1[0]*p2[11] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[11]*p2[0] ;
    dst[12] = p1[0]*p2[12] + p1[1]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[1] + p1[12]*p2[0] ;
    dst[13] = p1[0]*p2[13] + p1[1]*p2[7] + p1[2]*p2[5] + p1[5]*p2[2] + p1[7]*p2[1] + p1[13]*p2[0] ;
    dst[14] = p1[0]*p2[14] + p1[1]*p2[8] + p1[2]*p2[6] + p1[3]*p2[5] + p1[5]*p2[3] + p1[6]*p2[2] + p1[8]*p2[1] + p1[14]*p2[0] ;
    dst[15] = p1[0]*p2[15] + p1[1]*p2[9] + p1[3]*p2[6] + p1[6]*p2[3] + p1[9]*p2[1] + p1[15]*p2[0] ;
    dst[16] = p1[0]*p2[16] + p1[2]*p2[7] + p1[7]*p2[2] + p1[16]*p2[0] ;
    dst[17] = p1[0]*p2[17] + p1[2]*p2[8] + p1[3]*p2[7] + p1[7]*p2[3] + p1[8]*p2[2] + p1[17]*p2[0] ;
    dst[18] = p1[0]*p2[18] + p1[2]*p2[9] + p1[3]*p2[8] + p1[8]*p2[3] + p1[9]*p2[2] + p1[18]*p2[0] ;
    dst[19] = p1[0]*p2[19] + p1[3]*p2[9] + p1[9]*p2[3] + p1[19]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 3, 3, 3, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[19] = p1[0]*p2[19] + p1[3]*p2[9] + p1[9]*p2[3] + p1[19]*p2[0] ;
    p1[18] = p1[0]*p2[18] + p1[2]*p2[9] + p1[3]*p2[8] + p1[8]*p2[3] + p1[9]*p2[2] + p1[18]*p2[0] ;
    p1[17] = p1[0]*p2[17] + p1[2]*p2[8] + p1[3]*p2[7] + p1[7]*p2[3] + p1[8]*p2[2] + p1[17]*p2[0] ;
    p1[16] = p1[0]*p2[16] + p1[2]*p2[7] + p1[7]*p2[2] + p1[16]*p2[0] ;
    p1[15] = p1[0]*p2[15] + p1[1]*p2[9] + p1[3]*p2[6] + p1[6]*p2[3] + p1[9]*p2[1] + p1[15]*p2[0] ;
    p1[14] = p1[0]*p2[14] + p1[1]*p2[8] + p1[2]*p2[6] + p1[3]*p2[5] + p1[5]*p2[3] + p1[6]*p2[2] + p1[8]*p2[1] + p1[14]*p2[0] ;
    p1[13] = p1[0]*p2[13] + p1[1]*p2[7] + p1[2]*p2[5] + p1[5]*p2[2] + p1[7]*p2[1] + p1[13]*p2[0] ;
    p1[12] = p1[0]*p2[12] + p1[1]*p2[6] + p1[3]*p2[4] + p1[4]*p2[3] + p1[6]*p2[1] + p1[12]*p2[0] ;
    p1[11] = p1[0]*p2[11] + p1[1]*p2[5] + p1[2]*p2[4] + p1[4]*p2[2] + p1[5]*p2[1] + p1[11]*p2[0] ;
    p1[10] = p1[0]*p2[10] + p1[1]*p2[4] + p1[4]*p2[1] + p1[10]*p2[0] ;
    p1[9] = p1[0]*p2[9] + p1[3]*p2[3] + p1[9]*p2[0] ;
    p1[8] = p1[0]*p2[8] + p1[2]*p2[3] + p1[3]*p2[2] + p1[8]*p2[0] ;
    p1[7] = p1[0]*p2[7] + p1[2]*p2[2] + p1[7]*p2[0] ;
    p1[6] = p1[0]*p2[6] + p1[1]*p2[3] + p1[3]*p2[1] + p1[6]*p2[0] ;
    p1[5] = p1[0]*p2[5] + p1[1]*p2[2] + p1[2]*p2[1] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[1]*p2[1] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};








template<class numtype>
struct taylor_multiplier<numtype, 4, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[4]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 4, 1, 1, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 4, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] += p1[1]*p2[1] ;
    dst[6] += p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[7] += p1[1]*p2[3] + p1[3]*p2[1] ;
    dst[8] += p1[1]*p2[4] + p1[4]*p2[1] ;
    dst[9] += p1[2]*p2[2] ;
    dst[10] += p1[2]*p2[3] + p1[3]*p2[2] ;
    dst[11] += p1[2]*p2[4] + p1[4]*p2[2] ;
    dst[12] += p1[3]*p2[3] ;
    dst[13] += p1[3]*p2[4] + p1[4]*p2[3] ;
    dst[14] += p1[4]*p2[4] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] = p1[1]*p2[1] ;
    dst[6] = p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[7] = p1[1]*p2[3] + p1[3]*p2[1] ;
    dst[8] = p1[1]*p2[4] + p1[4]*p2[1] ;
    dst[9] = p1[2]*p2[2] ;
    dst[10] = p1[2]*p2[3] + p1[3]*p2[2] ;
    dst[11] = p1[2]*p2[4] + p1[4]*p2[2] ;
    dst[12] = p1[3]*p2[3] ;
    dst[13] = p1[3]*p2[4] + p1[4]*p2[3] ;
    dst[14] = p1[4]*p2[4] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] += p1[0]*m2[0] ;
    dst[2] += p1[0]*m2[1] ;
    dst[3] += p1[0]*m2[2] ;
    dst[4] += p1[0]*m2[3] ;
    dst[5] += p1[1]*m2[0] ;
    dst[6] += p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[7] += p1[1]*m2[2] + p1[3]*m2[0] ;
    dst[8] += p1[1]*m2[3] + p1[4]*m2[0] ;
    dst[9] += p1[2]*m2[1] ;
    dst[10] += p1[2]*m2[2] + p1[3]*m2[1] ;
    dst[11] += p1[2]*m2[3] + p1[4]*m2[1] ;
    dst[12] += p1[3]*m2[2] ;
    dst[13] += p1[3]*m2[3] + p1[4]*m2[2] ;
    dst[14] += p1[4]*m2[3] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] = p1[0]*m2[0] ;
    dst[2] = p1[0]*m2[1] ;
    dst[3] = p1[0]*m2[2] ;
    dst[4] = p1[0]*m2[3] ;
    dst[5] = p1[1]*m2[0] ;
    dst[6] = p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[7] = p1[1]*m2[2] + p1[3]*m2[0] ;
    dst[8] = p1[1]*m2[3] + p1[4]*m2[0] ;
    dst[9] = p1[2]*m2[1] ;
    dst[10] = p1[2]*m2[2] + p1[3]*m2[1] ;
    dst[11] = p1[2]*m2[3] + p1[4]*m2[1] ;
    dst[12] = p1[3]*m2[2] ;
    dst[13] = p1[3]*m2[3] + p1[4]*m2[2] ;
    dst[14] = p1[4]*m2[3] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] + dst[4]*p2[4] ;
    p1[1] += dst[1]*p2[0] + dst[5]*p2[1] + dst[6]*p2[2] + dst[7]*p2[3] + dst[8]*p2[4] ;
    p1[2] += dst[2]*p2[0] + dst[6]*p2[1] + dst[9]*p2[2] + dst[10]*p2[3] + dst[11]*p2[4] ;
    p1[3] += dst[3]*p2[0] + dst[7]*p2[1] + dst[10]*p2[2] + dst[12]*p2[3] + dst[13]*p2[4] ;
    p1[4] += dst[4]*p2[0] + dst[8]*p2[1] + dst[11]*p2[2] + dst[13]*p2[3] + dst[14]*p2[4] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[1]*m2[0] + dst[2]*m2[1] + dst[3]*m2[2] + dst[4]*m2[3] ;
    p1[1] += dst[5]*m2[0] + dst[6]*m2[1] + dst[7]*m2[2] + dst[8]*m2[3] ;
    p1[2] += dst[6]*m2[0] + dst[9]*m2[1] + dst[10]*m2[2] + dst[11]*m2[3] ;
    p1[3] += dst[7]*m2[0] + dst[10]*m2[1] + dst[12]*m2[2] + dst[13]*m2[3] ;
    p1[4] += dst[8]*m2[0] + dst[11]*m2[1] + dst[13]*m2[2] + dst[14]*m2[3] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 4, 2, 2>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[1]*p2[1] + p1[5]*p2[0] ;
    dst[6] += p1[0]*p2[6] + p1[1]*p2[2] + p1[2]*p2[1] + p1[6]*p2[0] ;
    dst[7] += p1[0]*p2[7] + p1[1]*p2[3] + p1[3]*p2[1] + p1[7]*p2[0] ;
    dst[8] += p1[0]*p2[8] + p1[1]*p2[4] + p1[4]*p2[1] + p1[8]*p2[0] ;
    dst[9] += p1[0]*p2[9] + p1[2]*p2[2] + p1[9]*p2[0] ;
    dst[10] += p1[0]*p2[10] + p1[2]*p2[3] + p1[3]*p2[2] + p1[10]*p2[0] ;
    dst[11] += p1[0]*p2[11] + p1[2]*p2[4] + p1[4]*p2[2] + p1[11]*p2[0] ;
    dst[12] += p1[0]*p2[12] + p1[3]*p2[3] + p1[12]*p2[0] ;
    dst[13] += p1[0]*p2[13] + p1[3]*p2[4] + p1[4]*p2[3] + p1[13]*p2[0] ;
    dst[14] += p1[0]*p2[14] + p1[4]*p2[4] + p1[14]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[1]*p2[1] + p1[5]*p2[0] ;
    dst[6] = p1[0]*p2[6] + p1[1]*p2[2] + p1[2]*p2[1] + p1[6]*p2[0] ;
    dst[7] = p1[0]*p2[7] + p1[1]*p2[3] + p1[3]*p2[1] + p1[7]*p2[0] ;
    dst[8] = p1[0]*p2[8] + p1[1]*p2[4] + p1[4]*p2[1] + p1[8]*p2[0] ;
    dst[9] = p1[0]*p2[9] + p1[2]*p2[2] + p1[9]*p2[0] ;
    dst[10] = p1[0]*p2[10] + p1[2]*p2[3] + p1[3]*p2[2] + p1[10]*p2[0] ;
    dst[11] = p1[0]*p2[11] + p1[2]*p2[4] + p1[4]*p2[2] + p1[11]*p2[0] ;
    dst[12] = p1[0]*p2[12] + p1[3]*p2[3] + p1[12]*p2[0] ;
    dst[13] = p1[0]*p2[13] + p1[3]*p2[4] + p1[4]*p2[3] + p1[13]*p2[0] ;
    dst[14] = p1[0]*p2[14] + p1[4]*p2[4] + p1[14]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 4, 2, 2, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[14] = p1[0]*p2[14] + p1[4]*p2[4] + p1[14]*p2[0] ;
    p1[13] = p1[0]*p2[13] + p1[3]*p2[4] + p1[4]*p2[3] + p1[13]*p2[0] ;
    p1[12] = p1[0]*p2[12] + p1[3]*p2[3] + p1[12]*p2[0] ;
    p1[11] = p1[0]*p2[11] + p1[2]*p2[4] + p1[4]*p2[2] + p1[11]*p2[0] ;
    p1[10] = p1[0]*p2[10] + p1[2]*p2[3] + p1[3]*p2[2] + p1[10]*p2[0] ;
    p1[9] = p1[0]*p2[9] + p1[2]*p2[2] + p1[9]*p2[0] ;
    p1[8] = p1[0]*p2[8] + p1[1]*p2[4] + p1[4]*p2[1] + p1[8]*p2[0] ;
    p1[7] = p1[0]*p2[7] + p1[1]*p2[3] + p1[3]*p2[1] + p1[7]*p2[0] ;
    p1[6] = p1[0]*p2[6] + p1[1]*p2[2] + p1[2]*p2[1] + p1[6]*p2[0] ;
    p1[5] = p1[0]*p2[5] + p1[1]*p2[1] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};











template<class numtype>
struct taylor_multiplier<numtype, 5, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[5]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[5]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 5, 1, 1, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[5] = p1[0]*p2[5] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};

template<class numtype>
struct polynomial_multiplier<numtype, 5, 1, 1>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[5]*p2[0] ;
    dst[6] += p1[1]*p2[1] ;
    dst[7] += p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[8] += p1[1]*p2[3] + p1[3]*p2[1] ;
    dst[9] += p1[1]*p2[4] + p1[4]*p2[1] ;
    dst[10] += p1[1]*p2[5] + p1[5]*p2[1] ;
    dst[11] += p1[2]*p2[2] ;
    dst[12] += p1[2]*p2[3] + p1[3]*p2[2] ;
    dst[13] += p1[2]*p2[4] + p1[4]*p2[2] ;
    dst[14] += p1[2]*p2[5] + p1[5]*p2[2] ;
    dst[15] += p1[3]*p2[3] ;
    dst[16] += p1[3]*p2[4] + p1[4]*p2[3] ;
    dst[17] += p1[3]*p2[5] + p1[5]*p2[3] ;
    dst[18] += p1[4]*p2[4] ;
    dst[19] += p1[4]*p2[5] + p1[5]*p2[4] ;
    dst[20] += p1[5]*p2[5] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[5]*p2[0] ;
    dst[6] = p1[1]*p2[1] ;
    dst[7] = p1[1]*p2[2] + p1[2]*p2[1] ;
    dst[8] = p1[1]*p2[3] + p1[3]*p2[1] ;
    dst[9] = p1[1]*p2[4] + p1[4]*p2[1] ;
    dst[10] = p1[1]*p2[5] + p1[5]*p2[1] ;
    dst[11] = p1[2]*p2[2] ;
    dst[12] = p1[2]*p2[3] + p1[3]*p2[2] ;
    dst[13] = p1[2]*p2[4] + p1[4]*p2[2] ;
    dst[14] = p1[2]*p2[5] + p1[5]*p2[2] ;
    dst[15] = p1[3]*p2[3] ;
    dst[16] = p1[3]*p2[4] + p1[4]*p2[3] ;
    dst[17] = p1[3]*p2[5] + p1[5]*p2[3] ;
    dst[18] = p1[4]*p2[4] ;
    dst[19] = p1[4]*p2[5] + p1[5]*p2[4] ;
    dst[20] = p1[5]*p2[5] ;
  }
   static void mul_monomial(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] += p1[0]*m2[0] ;
    dst[2] += p1[0]*m2[1] ;
    dst[3] += p1[0]*m2[2] ;
    dst[4] += p1[0]*m2[3] ;
    dst[5] += p1[0]*m2[4] ;
    dst[6] += p1[1]*m2[0] ;
    dst[7] += p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[8] += p1[1]*m2[2] + p1[3]*m2[0] ;
    dst[9] += p1[1]*m2[3] + p1[4]*m2[0] ;
    dst[10] += p1[1]*m2[4] + p1[5]*m2[0] ;
    dst[11] += p1[2]*m2[1] ;
    dst[12] += p1[2]*m2[2] + p1[3]*m2[1] ;
    dst[13] += p1[2]*m2[3] + p1[4]*m2[1] ;
    dst[14] += p1[2]*m2[4] + p1[5]*m2[1] ;
    dst[15] += p1[3]*m2[2] ;
    dst[16] += p1[3]*m2[3] + p1[4]*m2[2] ;
    dst[17] += p1[3]*m2[4] + p1[5]*m2[2] ;
    dst[18] += p1[4]*m2[3] ;
    dst[19] += p1[4]*m2[4] + p1[5]*m2[3] ;
    dst[20] += p1[5]*m2[4] ;
  }
  static void mul_monomial_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype m2[])
  {
    dst[1] = p1[0]*m2[0] ;
    dst[2] = p1[0]*m2[1] ;
    dst[3] = p1[0]*m2[2] ;
    dst[4] = p1[0]*m2[3] ;
    dst[5] = p1[0]*m2[4] ;
    dst[6] = p1[1]*m2[0] ;
    dst[7] = p1[1]*m2[1] + p1[2]*m2[0] ;
    dst[8] = p1[1]*m2[2] + p1[3]*m2[0] ;
    dst[9] = p1[1]*m2[3] + p1[4]*m2[0] ;
    dst[10] = p1[1]*m2[4] + p1[5]*m2[0] ;
    dst[11] = p1[2]*m2[1] ;
    dst[12] = p1[2]*m2[2] + p1[3]*m2[1] ;
    dst[13] = p1[2]*m2[3] + p1[4]*m2[1] ;
    dst[14] = p1[2]*m2[4] + p1[5]*m2[1] ;
    dst[15] = p1[3]*m2[2] ;
    dst[16] = p1[3]*m2[3] + p1[4]*m2[2] ;
    dst[17] = p1[3]*m2[4] + p1[5]*m2[2] ;
    dst[18] = p1[4]*m2[3] ;
    dst[19] = p1[4]*m2[4] + p1[5]*m2[3] ;
    dst[20] = p1[5]*m2[4] ;
  }
  static void antimul(const numtype dst[], numtype p1[], const numtype p2[])
  { 
    p1[0] += dst[0]*p2[0] + dst[1]*p2[1] + dst[2]*p2[2] + dst[3]*p2[3] + dst[4]*p2[4] + dst[5]*p2[5] ;
    p1[1] += dst[1]*p2[0] + dst[6]*p2[1] + dst[7]*p2[2] + dst[8]*p2[3] + dst[9]*p2[4] + dst[10]*p2[5] ;
    p1[2] += dst[2]*p2[0] + dst[7]*p2[1] + dst[11]*p2[2] + dst[12]*p2[3] + dst[13]*p2[4] + dst[14]*p2[5] ;
    p1[3] += dst[3]*p2[0] + dst[8]*p2[1] + dst[12]*p2[2] + dst[15]*p2[3] + dst[16]*p2[4] + dst[17]*p2[5] ;
    p1[4] += dst[4]*p2[0] + dst[9]*p2[1] + dst[13]*p2[2] + dst[16]*p2[3] + dst[18]*p2[4] + dst[19]*p2[5] ;
    p1[5] += dst[5]*p2[0] + dst[10]*p2[1] + dst[14]*p2[2] + dst[17]*p2[3] + dst[19]*p2[4] + dst[20]*p2[5] ;
  }
  static void antimul_monomial(const numtype dst[], numtype p1[], const numtype m2[])
  { 
    p1[0] += dst[1]*m2[0] + dst[2]*m2[1] + dst[3]*m2[2] + dst[4]*m2[3] + dst[5]*m2[4] ;
    p1[1] += dst[6]*m2[0] + dst[7]*m2[1] + dst[8]*m2[2] + dst[9]*m2[3] + dst[10]*m2[4] ;
    p1[2] += dst[7]*m2[0] + dst[11]*m2[1] + dst[12]*m2[2] + dst[13]*m2[3] + dst[14]*m2[4] ;
    p1[3] += dst[8]*m2[0] + dst[12]*m2[1] + dst[15]*m2[2] + dst[16]*m2[3] + dst[17]*m2[4] ;
    p1[4] += dst[9]*m2[0] + dst[13]*m2[1] + dst[16]*m2[2] + dst[18]*m2[3] + dst[19]*m2[4] ;
    p1[5] += dst[10]*m2[0] + dst[14]*m2[1] + dst[17]*m2[2] + dst[19]*m2[3] + dst[20]*m2[4] ;
  }
};

template<class numtype>
struct taylor_multiplier<numtype, 5, 2, 2>
{
  static void mul(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] += p1[0]*p2[0] ;
    dst[1] += p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] += p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] += p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] += p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] += p1[0]*p2[5] + p1[5]*p2[0] ;
    dst[6] += p1[0]*p2[6] + p1[1]*p2[1] + p1[6]*p2[0] ;
    dst[7] += p1[0]*p2[7] + p1[1]*p2[2] + p1[2]*p2[1] + p1[7]*p2[0] ;
    dst[8] += p1[0]*p2[8] + p1[1]*p2[3] + p1[3]*p2[1] + p1[8]*p2[0] ;
    dst[9] += p1[0]*p2[9] + p1[1]*p2[4] + p1[4]*p2[1] + p1[9]*p2[0] ;
    dst[10] += p1[0]*p2[10] + p1[1]*p2[5] + p1[5]*p2[1] + p1[10]*p2[0] ;
    dst[11] += p1[0]*p2[11] + p1[2]*p2[2] + p1[11]*p2[0] ;
    dst[12] += p1[0]*p2[12] + p1[2]*p2[3] + p1[3]*p2[2] + p1[12]*p2[0] ;
    dst[13] += p1[0]*p2[13] + p1[2]*p2[4] + p1[4]*p2[2] + p1[13]*p2[0] ;
    dst[14] += p1[0]*p2[14] + p1[2]*p2[5] + p1[5]*p2[2] + p1[14]*p2[0] ;
    dst[15] += p1[0]*p2[15] + p1[3]*p2[3] + p1[15]*p2[0] ;
    dst[16] += p1[0]*p2[16] + p1[3]*p2[4] + p1[4]*p2[3] + p1[16]*p2[0] ;
    dst[17] += p1[0]*p2[17] + p1[3]*p2[5] + p1[5]*p2[3] + p1[17]*p2[0] ;
    dst[18] += p1[0]*p2[18] + p1[4]*p2[4] + p1[18]*p2[0] ;
    dst[19] += p1[0]*p2[19] + p1[4]*p2[5] + p1[5]*p2[4] + p1[19]*p2[0] ;
    dst[20] += p1[0]*p2[20] + p1[5]*p2[5] + p1[20]*p2[0] ;
  }
  static void mul_set(numtype POLYMUL_RESTRICT dst[], const numtype p1[], const numtype p2[])
  {
    dst[0] = p1[0]*p2[0] ;
    dst[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    dst[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    dst[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    dst[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    dst[5] = p1[0]*p2[5] + p1[5]*p2[0] ;
    dst[6] = p1[0]*p2[6] + p1[1]*p2[1] + p1[6]*p2[0] ;
    dst[7] = p1[0]*p2[7] + p1[1]*p2[2] + p1[2]*p2[1] + p1[7]*p2[0] ;
    dst[8] = p1[0]*p2[8] + p1[1]*p2[3] + p1[3]*p2[1] + p1[8]*p2[0] ;
    dst[9] = p1[0]*p2[9] + p1[1]*p2[4] + p1[4]*p2[1] + p1[9]*p2[0] ;
    dst[10] = p1[0]*p2[10] + p1[1]*p2[5] + p1[5]*p2[1] + p1[10]*p2[0] ;
    dst[11] = p1[0]*p2[11] + p1[2]*p2[2] + p1[11]*p2[0] ;
    dst[12] = p1[0]*p2[12] + p1[2]*p2[3] + p1[3]*p2[2] + p1[12]*p2[0] ;
    dst[13] = p1[0]*p2[13] + p1[2]*p2[4] + p1[4]*p2[2] + p1[13]*p2[0] ;
    dst[14] = p1[0]*p2[14] + p1[2]*p2[5] + p1[5]*p2[2] + p1[14]*p2[0] ;
    dst[15] = p1[0]*p2[15] + p1[3]*p2[3] + p1[15]*p2[0] ;
    dst[16] = p1[0]*p2[16] + p1[3]*p2[4] + p1[4]*p2[3] + p1[16]*p2[0] ;
    dst[17] = p1[0]*p2[17] + p1[3]*p2[5] + p1[5]*p2[3] + p1[17]*p2[0] ;
    dst[18] = p1[0]*p2[18] + p1[4]*p2[4] + p1[18]*p2[0] ;
    dst[19] = p1[0]*p2[19] + p1[4]*p2[5] + p1[5]*p2[4] + p1[19]*p2[0] ;
    dst[20] = p1[0]*p2[20] + p1[5]*p2[5] + p1[20]*p2[0] ;
  }
};

template<class numtype>
struct taylor_inplace_multiplier<numtype, 5, 2, 2, 0>
{
  static void mul(numtype p1[], const numtype p2[])
  {
    p1[20] = p1[0]*p2[20] + p1[5]*p2[5] + p1[20]*p2[0] ;
    p1[19] = p1[0]*p2[19] + p1[4]*p2[5] + p1[5]*p2[4] + p1[19]*p2[0] ;
    p1[18] = p1[0]*p2[18] + p1[4]*p2[4] + p1[18]*p2[0] ;
    p1[17] = p1[0]*p2[17] + p1[3]*p2[5] + p1[5]*p2[3] + p1[17]*p2[0] ;
    p1[16] = p1[0]*p2[16] + p1[3]*p2[4] + p1[4]*p2[3] + p1[16]*p2[0] ;
    p1[15] = p1[0]*p2[15] + p1[3]*p2[3] + p1[15]*p2[0] ;
    p1[14] = p1[0]*p2[14] + p1[2]*p2[5] + p1[5]*p2[2] + p1[14]*p2[0] ;
    p1[13] = p1[0]*p2[13] + p1[2]*p2[4] + p1[4]*p2[2] + p1[13]*p2[0] ;
    p1[12] = p1[0]*p2[12] + p1[2]*p2[3] + p1[3]*p2[2] + p1[12]*p2[0] ;
    p1[11] = p1[0]*p2[11] + p1[2]*p2[2] + p1[11]*p2[0] ;
    p1[10] = p1[0]*p2[10] + p1[1]*p2[5] + p1[5]*p2[1] + p1[10]*p2[0] ;
    p1[9] = p1[0]*p2[9] + p1[1]*p2[4] + p1[4]*p2[1] + p1[9]*p2[0] ;
    p1[8] = p1[0]*p2[8] + p1[1]*p2[3] + p1[3]*p2[1] + p1[8]*p2[0] ;
    p1[7] = p1[0]*p2[7] + p1[1]*p2[2] + p1[2]*p2[1] + p1[7]*p2[0] ;
    p1[6] = p1[0]*p2[6] + p1[1]*p2[1] + p1[6]*p2[0] ;
    p1[5] = p1[0]*p2[5] + p1[5]*p2[0] ;
    p1[4] = p1[0]*p2[4] + p1[4]*p2[0] ;
    p1[3] = p1[0]*p2[3] + p1[3]*p2[0] ;
    p1[2] = p1[0]*p2[2] + p1[2]*p2[0] ;
    p1[1] = p1[0]*p2[1] + p1[1]*p2[0] ;
    p1[0] = p1[0]*p2[0] ;
  }
};











